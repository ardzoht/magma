// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Enodeb Representation of an enodeB
// swagger:model enodeb
type Enodeb struct {

	// attached gateway id
	// Read Only: true
	AttachedGatewayID string `json:"attached_gateway_id,omitempty"`

	// config
	// Required: true
	Config *EnodebConfiguration `json:"config"`

	// description
	Description string `json:"description,omitempty"`

	// enodeb config
	EnodebConfig *EnodebEnodebConfig `json:"enodeb_config,omitempty"`

	// name
	// Required: true
	// Min Length: 1
	Name string `json:"name"`

	// serial
	// Required: true
	// Min Length: 1
	Serial string `json:"serial"`
}

// Validate validates this enodeb
func (m *Enodeb) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnodebConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSerial(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Enodeb) validateConfig(formats strfmt.Registry) error {

	if err := validate.Required("config", "body", m.Config); err != nil {
		return err
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *Enodeb) validateEnodebConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.EnodebConfig) { // not required
		return nil
	}

	if m.EnodebConfig != nil {
		if err := m.EnodebConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enodeb_config")
			}
			return err
		}
	}

	return nil
}

func (m *Enodeb) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *Enodeb) validateSerial(formats strfmt.Registry) error {

	if err := validate.RequiredString("serial", "body", string(m.Serial)); err != nil {
		return err
	}

	if err := validate.MinLength("serial", "body", string(m.Serial), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Enodeb) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Enodeb) UnmarshalBinary(b []byte) error {
	var res Enodeb
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnodebEnodebConfig enodeb enodeb config
// swagger:model EnodebEnodebConfig
type EnodebEnodebConfig struct {

	// config type
	// Required: true
	// Enum: [MANAGED UNMANAGED]
	ConfigType string `json:"config_type"`

	// managed config
	ManagedConfig *EnodebConfiguration `json:"managed_config,omitempty"`

	// unmanaged config
	UnmanagedConfig *UnmanagedEnodebConfiguration `json:"unmanaged_config,omitempty"`
}

// Validate validates this enodeb enodeb config
func (m *EnodebEnodebConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagedConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnmanagedConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var enodebEnodebConfigTypeConfigTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MANAGED","UNMANAGED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		enodebEnodebConfigTypeConfigTypePropEnum = append(enodebEnodebConfigTypeConfigTypePropEnum, v)
	}
}

const (

	// EnodebEnodebConfigConfigTypeMANAGED captures enum value "MANAGED"
	EnodebEnodebConfigConfigTypeMANAGED string = "MANAGED"

	// EnodebEnodebConfigConfigTypeUNMANAGED captures enum value "UNMANAGED"
	EnodebEnodebConfigConfigTypeUNMANAGED string = "UNMANAGED"
)

// prop value enum
func (m *EnodebEnodebConfig) validateConfigTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, enodebEnodebConfigTypeConfigTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EnodebEnodebConfig) validateConfigType(formats strfmt.Registry) error {

	if err := validate.RequiredString("enodeb_config"+"."+"config_type", "body", string(m.ConfigType)); err != nil {
		return err
	}

	// value enum
	if err := m.validateConfigTypeEnum("enodeb_config"+"."+"config_type", "body", m.ConfigType); err != nil {
		return err
	}

	return nil
}

func (m *EnodebEnodebConfig) validateManagedConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.ManagedConfig) { // not required
		return nil
	}

	if m.ManagedConfig != nil {
		if err := m.ManagedConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enodeb_config" + "." + "managed_config")
			}
			return err
		}
	}

	return nil
}

func (m *EnodebEnodebConfig) validateUnmanagedConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.UnmanagedConfig) { // not required
		return nil
	}

	if m.UnmanagedConfig != nil {
		if err := m.UnmanagedConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enodeb_config" + "." + "unmanaged_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnodebEnodebConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnodebEnodebConfig) UnmarshalBinary(b []byte) error {
	var res EnodebEnodebConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
